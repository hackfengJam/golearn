apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{service}}
  labels:
    app: {{service}}
spec:
  minReadySeconds: 15 # 至少 pod 需要ready 15 秒
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 20%  # 一次更新的百分比，向上取整
      maxUnavailable: 50%  # 最大不可用的实例
  replicas: 2 # 每个服务部署 2 个实例, 作高可用或者滚动发布。可以配置。
  selector:
    matchLabels:
      app: {{service}}
  template:
    metadata:
      labels:
        app: {{service}}
    spec:
      dnsPolicy: "Default"  # 继承主机的 host
      hostIPC: true # 为了使qconf 可以在容器中使用， https://github.com/Qihoo360/QConf/issues/21  。Qconf 应该考虑迁移了 ：-）
      containers:
      - name: {{service}}

        image: {{hub_prefix}}/{{service}}:latest
        command: ["./run.sh"]
        args: ["{{service}}", "test"] # 使用测试环境的配置文件
        lifecycle:
        #  postStart:
        #    exec:
        #      command: ["/bin/sh", "-c", "echo post start"]

          preStop:
            exec:
              command: ["/bin/sh","-c","ps aux  |grep ./src/ptapp.cn | awk '{print $2}' | xargs kill "]  #  graceful stop

        # 只有 ptgate 才需要暴露端口
        # ports:
        # - containerPort: 6001

        env:
        - name: "GIN_MODE"
          value: {{gin_mode}}

        - name: "ENIGMA_URL"
          value: {{ENIGMA_URL}}

        resources:
        #  集群资源足够后开启资源预留策略
        #  requests:
        #    memory: "500Mi"
        #    cpu: "500m"

        # 限制 CPU 和 内存
           limits:
             memory: "500Mi"
             cpu: "500m"

        # 需要微服务改造，以支持 health check
        # livenessProbe:  # 健康检查 refer to https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#define-a-liveness-http-request
        #  httpGet:
        #    path: /metrics  # since the go micro service doesn't expose healthz http, here we use prometheus port
        #    port: {{port}}

        volumeMounts:  # 最好使用 hostAlias 来配置host。
        - mountPath: /etc/hosts
          name: node-hosts

       # ptcensor 需要挂载 敏感词
       # - mountPath: /home/super/ptcensor/dict
       #   name: censor-dict


      volumes:
      - name: node-hosts
        hostPath:
          path: /etc/hosts

     # ptcensor 需要挂载敏感词
     # - name: censor-dict
     #   hostPath:
     #     path: /data/censor-dict



